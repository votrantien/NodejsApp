<div id="page-wrapper">
    <div class="row">
        <input type="hidden" value="{{username}}" id="socketName">
        {{#each groups as |group|}}
        <div class="col-lg-12 group_device" id="{{group._id}}">
            <h4 class="group_name">{{group.group_name}}</h4>
            {{#each ../device_types as |device_type|}}
            {{#if_ device_type.prefix 'not_in' 'AHSD,BSGW'}}
            <button type="button" class="btn btn-default sensor-btn" type-id="{{device_type._id}}"
                dev-type="{{device_type.prefix}}">
                {{device_type.device_type}}
            </button>
            <div class="col-lg-12 devices collapse" dev-type="{{device_type.prefix}}">
                <hr>
                <h4 class="label-device-type">{{device_type.device_type}}</h4>
                {{#each ../../devices as |device|}}
                {{#if_ group._id '==' device.group._id}}
                {{#if_ device.device_type.prefix '==' device_type.prefix}}
                <input type="hidden" class="device-serial" value="{{device.sn_number}}">
                <div class="col-lg-2 label-device label-{{device_type.prefix}} device" dev-group="{{group._id}}"
                    dev-sn="{{device.sn_number}}" dev-type="{{device_type.prefix}}"
                    id="device-data-{{device.sn_number}}">
                    {{#if_ device.status '==' '1'}}
                    <span class="device-status device-on"></span>
                    {{else}}
                    <span class="device-status device-off"></span>
                    {{/if_}}
                    {{#if_ device.data 'is_exist' 'p_null'}}
                    {{#data}}
                    {{#each val}}
                    <p class="value">{{this}}</p>
                    {{/each}}
                    <p class="battery">Battery: <span class="sub-value">{{battery}}</span></p>
                    <p class="rssi">Rssi: <span class="sub-value">{{rssi}}</span></p>
                    {{/data}}
                    {{else}}
                    <p class="value">N/a</p>
                    <p class="battery">Battery: <span class="sub-value">N/a</span></p>
                    <p class="rssi">Rssi: <span class="sub-value">N/a</span></p>
                    {{/if_}}
                    <p class="serial">S/n: {{device.sn_number}}</p>
                    <p class="name">Name: {{device.device_name}}</p>
                    {{#if_ device.gateway 'not_in' 'none'}}
                    <p class="gateway">G/w: {{device.gateway}}</p>
                    {{/if_}}
                </div>
                {{/if_}}
                {{/if_}}
                {{/each}}
                <canvas id="chart-{{group._id}}-{{device_type.prefix}}" width="400" height="150"></canvas>
            </div>
            {{/if_}}
            {{/each}}
        </div>
        {{/each}}
    </div>
    <!-- /.row -->
</div>
{{!-- <div class="container">
    <div class="row">
        {{#each groups as |group|}}
        <div class="col-lg-12 group_device">
            <h4 class="group_name">{{group.group_name}}</h4>
            {{#each ../devices as |device|}}
            {{#if_eq group._id device.group._id}}
            <div class="col-lg-2 device">
                <p class="value">50 <i class="uom">%</i></p>
                <p class="serial">{{device.sn_number}}</p>
                <p class="device_type">{{device.device_type.device_type}}</p>
            </div>
            {{/if_eq}}
            {{/each}}
        </div>
        {{/each}}
    </div>
</div> --}}
<script src="/socket.io/socket.io.js"></script>
<script src="/js/chart.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        var socketName = $('#socketName').val();
        var socket = io('', { query: `socketName=${socketName}` });


        socket.on('server_data_sensor', function (data) {
            $('#value').html(data)
        })

        socket.on('device_disconnect', function (data) {
            var serial = data
            var status = $(`#device-data-${serial} .device-status`).hasClass('device-on');
            if (status) {
                $(`#device-data-${serial} .device-status`).toggleClass('device-on device-off');
            }
            $(`#device-data-${serial} .value`).html('N/a');
        })
        //socket start real time device
        async function StartRealTime() {
            var list_devices = [];
            $('.device-serial').each(function () {
                list_devices.push($(this).val())
            })
            //console.log(list_devices)
            socket.emit('start_real_time_device', { list_devices, socketName });
        }
        socket.on(socketName, function (device) {
            //console.log(device);
            if (!device.serial || !device.data) {
                return;
            }
            var serial = device.serial;
            var arr_value = device.data.val;
            var dev_type = serial.slice(4);
            if (dev_type != 'AHSD') {
                var battery = device.data.battery || 'N/a';
                var rssi = device.data.rssi || 'N/a';
                var status = $(`#device-data-${serial} .device-status`).hasClass('device-off');
                if (status) {
                    $(`#device-data-${serial} .device-status`).toggleClass('device-off device-on');
                }
                var value = Object.values(arr_value).reduce((pre_val, cur_val, key) => pre_val += "-" + cur_val)
                $(`#device-data-${serial} .value`).html(value);
                $(`#device-data-${serial} .battery .sub-value`).html(battery);
                $(`#device-data-${serial} .rssi .sub-value`).html(rssi);
            }
        })
        StartRealTime();

        //Event menu
        $(document).on("click", ".sensor-btn", function () {
            var group_id = $(this).parent().attr('id');
            var dev_type = $(this).attr('dev-type');
            var idChart = `chart-${group_id}-${dev_type}`;
            $(`#${group_id} .sensor-btn[dev-type*="${dev_type}"]`).toggleClass("btn-on");
            $(`#${group_id} .devices[dev-type*="${dev_type}"]`).collapse('toggle');
        })
        //draw chart
        $(document).on("click", ".label-device", async function () {
            var devType = $(this).attr('dev-type');
            var devGroup = $(this).attr('dev-group');
            var idChart = 'chart-' + devGroup + '-' + devType;
            var label = $(this).attr('dev-sn');
            var chart = Chart.getChart(idChart);
            var timeLabel = [];
            var data = [];
            var startDate = '2021-07-20';
            var endDate = '2021-07-21';
            if (label == 'NOLX123456795') {
                data = [1, 5, 2, 3, 5, 4, 8, 5];
            } else {
                data = [2, 5, 8, 2, 3, 5, 4, 7];
            }
            await postData('/device/device-logs', { serial: label, startDate: startDate, endDate: endDate })
                .then(resData => {
                    if (resData.status == 400) {
                        return
                    }
                    else {
                        console.log(resData)
                    }
                });
            $(this).toggleClass('chart-active');
            var checkActive = $('#' + devGroup + ' .devices[dev-type*="' + devType + '"] .label-device').hasClass('chart-active')
            if (checkActive) {
                if (!chart) {
                    DrawChart(idChart, label, data);
                } else {
                    if ($(this).hasClass('chart-active')) {
                        addData(chart, label, data, title);
                    } else {
                        removeDataset(chart, label);
                    }
                }
            } else {
                chart.destroy();
            }
        })
    })
</script>

<script>
    async function postData(url = '', data = {}) {
        // Default options are marked with *
        const response = await fetch(url, {
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            mode: 'cors', // no-cors, *cors, same-origin
            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
            credentials: 'same-origin', // include, *same-origin, omit
            headers: {
                'Content-Type': 'application/json'
                //'Content-Type': 'application/x-www-form-urlencoded',
                //'Accept': 'application/json'
            },
            redirect: 'follow', // manual, *follow, error
            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
            body: JSON.stringify(data) // body data type must match "Content-Type" header
        });
        if (response.status == 200)
            return response.json(); // parses JSON response into native JavaScript objects
        return response
    }

    var colorList = ['#B73225', '#4DA8DA', '#FFD6C'];

    function DrawChart(idCanvas, label, data, title) {
        var ctx = document.getElementById(idCanvas);
        if (ctx)
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                    datasets: [{
                        label: label,
                        data: data,
                        backgroundColor: [
                            colorList[0]
                        ],
                        borderColor: [
                            colorList[0]
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: title
                        }
                    },
                }
            });
    }
    var dynamicColors = function () {
        var r = Math.floor(Math.random() * 255);
        var g = Math.floor(Math.random() * 255);
        var b = Math.floor(Math.random() * 255);
        return "rgb(" + r + "," + g + "," + b + ")";
    };

    function addData(chart, label, data) {
        //chart.data.labels.push(label);
        var chartLength = chart.data.datasets.length;
        var colorCode = dynamicColors();
        var dataset = {
            label: label,
            data: data,
            backgroundColor: [
                colorCode
            ],
            borderColor: [
                colorCode
            ],
            borderWidth: 1
        }
        chart.data.datasets.push(dataset);
        chart.update();
    }

    function removeDataset(chart, label) {
        chart.data.datasets = chart.data.datasets.filter(function (obj) {
            return (obj.label != label);
        });
        chart.update();
    }
</script>