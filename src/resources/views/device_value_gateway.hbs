<style>
    .group-wrapper {
        margin-bottom: 15px;
    }

    .group-label {
        font-size: 2rem;
        color: #039666;
        margin-bottom: 15px;
    }

    .group-item {
        border-bottom: solid 1px #016343;
        border-left: solid 1px #016343;
        padding-bottom: 5px;
    }

    .tab-controll {
        border-bottom: solid 2px #016343;
    }

    .tab-link {
        font-size: 1.5rem;
        border-radius: 0;
        outline: none;
        border: none;
        padding: 15px;
        margin: 10px 0px 0px;
        color: white;
        background-color: #016343;
    }

    .tab-active {
        background-color: #039666;
    }

    .tab-content {
        margin-top: 15px;
    }

    .device-type-controll {
        position: relative;
        font-size: 1.5rem;
        border-radius: 0;
        outline: none;
        border: none;
        padding: 10px;
        margin: 5px;
        color: white;
        background-color: #016343;
    }

    .device-group {
        padding-top: 2px;
        margin: 5px;
        position: relative;
        border: solid 1px #016343;
        margin-top: 15px;
    }

    .device-group::before {
        content: attr(group-label)"\a";
        white-space: pre;
        background-color: #016343;
        padding: 5px;
    }

    .device-item {
        padding: 12px;
        width: 150px;
        max-width: 150px;
        font-size: 1.3rem;
        border-radius: 0;
        outline: none;
        border: none;
        margin: 10px;
        color: white;
        background-color: #016343;
        text-align: left;
        text-overflow: ellipsis;
        position: relative;
    }

    .device-item * {}

    .device-item .device-item-value {
        text-align: right;
        font-size: 2rem;
        font-weight: bold;
    }

    .collapse-open::after {
        position: absolute;
        content: '';
        width: 5px;
        height: 100%;
        left: 0;
        background-color: yellow;
        top: 0;
    }

    /* device status */
    .status-1::after {
        position: absolute;
        content: 'Online';
        color: #42ff42;
        top: 0;
        right: 0;
        padding: 3px;
        font-weight: bold;
        background-color: rgba(0, 0, 0, 0.7);
    }

    .status-2::after {
        position: absolute;
        content: 'Sleep';
        color: #fbff04;
        top: 0;
        right: 0;
        padding: 3px;
        font-weight: bold;
        background-color: rgba(0, 0, 0, 0.7);
    }

    .status-0::after {
        position: absolute;
        content: 'Offline';
        color: #ff0000;
        top: 0;
        right: 0;
        padding: 3px;
        font-weight: bold;
        background-color: rgba(0, 0, 0, 0.7);
    }

    .uom-wrapper {
        padding: 8px;
    }

    .list-uom {
        background-color: black;
        border: none;
        min-width: 200px;
        font-weight: bold;
    }

    .chart-title {
        width: 100%;
        color: rgba(255, 255, 255, 0.7);
        text-align: center;
    }

    .chart-wrapper {
        position: relative;
    }

    .chart-canvas {
        max-height: 400px;
    }

    /* check device on chart */
    .on-chart::before {
        position: absolute;
        content: 'Biểu đồ';
        padding: 3px;
        font-size: 1rem;
        background-color: green;
        color: #fff;
        bottom: 0;
        right: 0;
    }

    .date-picker-div {
        margin: 10px;
    }

    .date-picker-div .date-picker {
        background: none;
        color: #fff;
        text-align: left;
        width: fit-content;
    }

    .date-picker-wrapper table {
        background-color: #016343;
    }

    .quick-time-list {
        display: flex;
        list-style: none;
        justify-content: flex-end;
    }

    .quick-time-list .quick-time-item {
        padding: 5px 10px 5px;
        font-size: 1.3rem;
        font-weight: bold;
        margin-left: 5px;
        width: 50px;
        text-align: center;
        cursor: pointer;
        position: relative;
        color: #fff;
    }

    .quick-time-list .quick-time-label {
        padding: 5px 10px 5px;
        font-size: 1.3rem;
        font-weight: bold;
        margin-left: 5px;
        text-align: center;
        color: #fff;
    }

    .high-light-box::after {
        position: absolute;
        content: '';
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: solid 3px #1ee05a;
    }
</style>
<div id="page-wrapper">
    <input type="hidden" id="user" value="{{username}}">
    <div class="row">
        {{!-- group --}}
        {{#groups as |group|}}
        <div class="col-lg-12 group-wrapper">
            {{!-- group label --}}
            <div class="group-label">
                <i class="fas fa-leaf fa-lg"></i>
                <span class="group-name">{{this.group_name}}</span>
            </div>
            {{!-- group item --}}
            <div class="group-item" id="g-{{group._id}}">

                {{!-- tab gateway controll --}}
                <div class="tab-controll">
                    {{#each ../gateways as |gateway|}}
                    {{#if_ gateway.group '==' group._id}}
                    <button class="tab-link"
                        onclick="openGroupContent('gw-{{gateway.sn_number}}',this,'g-{{group._id}}')">G/w:
                        {{gateway.sn_number}}</button>
                    {{/if_}}
                    {{/each}}
                </div>
                {{!-- tab content gateway --}}
                {{#each ../gateways as |gateway|}}
                {{#if_ gateway.group '==' group._id}}
                <input type="hidden" class="gateway_sn" value="{{gateway.sn_number}}">
                <div class="tab-content" id="gw-{{gateway.sn_number}}" style="display: none;">
                    {{!-- device type controll --}}
                    <div class="device-type-group-controll">
                        {{#each ../../device_types as |dev_type|}}
                        {{#if_ dev_type.prefix 'not_in' 'AHSD,BSGW'}}
                        <button class="device-type-controll" data-toggle="collapse"
                            data-target="#dev-type-{{gateway.sn_number}}-{{dev_type.prefix}}">{{dev_type.device_type}}</button>
                        {{/if_}}
                        {{/each}}
                    </div>
                    {{!-- device type controll --}}

                    {{!-- device item --}}
                    {{#each ../../device_types as |dev_type|}}
                    <div class="row collapse device-group" id="dev-type-{{gateway.sn_number}}-{{dev_type.prefix}}"
                        group-label="{{dev_type.device_type}}"
                        chart-id="chart-{{gateway.sn_number}}-{{dev_type.prefix}}">
                        <div class="date-picker-div">
                            <label for="#date-picker-{{gateway.sn_number}}-{{dev_type.prefix}}">
                                Thời gian
                            </label>
                            <input type="button" class="date-picker"
                                id="date-picker-{{gateway.sn_number}}-{{dev_type.prefix}}"
                                chart-id="chart-{{gateway.sn_number}}-{{dev_type.prefix}}"
                                dev-group="dev-type-{{gateway.sn_number}}-{{dev_type.prefix}}">
                        </div>
                        {{!-- device controll --}}
                        <div>
                            {{#each ../../../devices as |device|}}
                            {{#if_ device.gateway '==' gateway.sn_number}}
                            {{#if_ device.device_model '==' dev_type.prefix}}
                            <button class="device-item status-{{device.status}}"
                                style="background-color: {{dev_type.type_properties.color}};"
                                id="dev-{{device.sn_number}}" device-sn="{{device.sn_number}}"
                                gateway="{{gateway.sn_number}}" dev-type="{{dev_type.prefix}}" on-chart="false"
                                dev-name="{{device.device_name}}" type-name="{{dev_type.device_type}}"
                                color-idx="{{@index}}">
                                <p class="device-item-dynamic-value">
                                    <span class="device-item-battery">
                                        <i class="fas fa-battery-three-quarters icon"></i>
                                        <i class="value">N/a</i>
                                    </span>
                                    <span class="device-item-rssi">
                                        <i class="fas fa-wifi icon"></i>
                                        <i class="value">N/a</i>
                                    </span>
                                    <br>
                                    <span class="device-item-value">
                                        <i class="fas fa-bullseye icon"></i>
                                        <i class="value">N/a</i>
                                    </span>
                                </p>
                                <p class="device-item-name">{{device.device_name}}</p>
                            </button>
                            {{/if_}}
                            {{/if_}}
                            {{/each}}
                        </div>
                        {{!-- chart area --}}
                        <div class="chart-area">
                            <div class="uom-wrapper col-lg-6">
                                <label for="#uom-{{gateway.sn_number}}-{{dev_type.prefix}}">
                                    Chọn đơn vị đo:
                                </label>
                                <select class="list-uom" id="uom-{{gateway.sn_number}}-{{dev_type.prefix}}"
                                    chart-id="chart-{{gateway.sn_number}}-{{dev_type.prefix}}"
                                    dev-group="dev-type-{{gateway.sn_number}}-{{dev_type.prefix}}">
                                    {{#each uom_values}}
                                    <option value="{{@key}}">{{this}}</option>
                                    {{/each}}
                                </select>
                            </div>
                            <div class="quick-time-wrapper col-lg-6">
                                <ul class="quick-time-list">
                                    <li class="quick-time-label"
                                        style="background-color: {{dev_type.type_properties.color}};">Mốc thời gian</li>
                                    <li class="quick-time-item"
                                        style="background-color: {{dev_type.type_properties.color}};" start-time="00:00"
                                        end-time="03:00">3h</li>
                                    <li class="quick-time-item"
                                        style="background-color: {{dev_type.type_properties.color}};" start-time="03:00"
                                        end-time="09:00">6h</li>
                                    <li class="quick-time-item"
                                        style="background-color: {{dev_type.type_properties.color}};" start-time="06:00"
                                        end-time="12:00">9h</li>
                                    <li class="quick-time-item"
                                        style="background-color: {{dev_type.type_properties.color}};" start-time="09:00"
                                        end-time="23:59">12h</li>
                                    <li class="quick-time-item"
                                        style="background-color: {{dev_type.type_properties.color}};" start-time="00:00"
                                        end-time="23:59">24h</li>
                                </ul>
                            </div>
                            <div class="col-lg-12 chart-wrapper">
                                <h3 class="chart-title">Chưa có dữ liệu</h3>
                                <canvas id="chart-{{gateway.sn_number}}-{{dev_type.prefix}}" width="100%"
                                    class="chart-canvas"></canvas>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                    {{!-- device item --}}
                </div>
                {{/if_}}
                {{/each}}
                {{!-- tab content gateway --}}
            </div>
        </div>
        {{/groups}}
        {{!-- end group --}}
    </div>
    <!-- /.row -->
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="/js/chart.min.js"></script>
<script src="/js/chartjs-adapter-date-fns.bundle.min.js"></script>
<script src="/js/jquery.daterangepicker.js"></script>
<script>
    //tab controll
    function openGroupContent(idgateWay, element, idGroup) {
        $(`#${idGroup} .tab-content`).hide();
        $(`#${idGroup} .tab-link`).removeClass('tab-active');
        $(element).toggleClass('tab-active');
        $(`#${idgateWay}`).show();
    }
    //scroll when collapse
    $('.device-group').on('shown.bs.collapse', function () {
        ScrollToElement($(this).attr('id'));
    });


    //click to active device type button
    $(document).on('click', '.device-type-controll', function () {
        $(this).toggleClass('collapse-open');
    })
    $(document).ready(function () {
        //datepicker 
        $('.date-picker').each(function () {
            var dpId = '#' + $(this).attr('id');
            var today = new Date()
            var startDate = String(today.getFullYear()).padStart(2, '0') + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + String(today.getDate()).padStart(2, '0') + ' ' + '00:00';
            var endDate = String(today.getFullYear()).padStart(2, '0') + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + String(today.getDate()).padStart(2, '0') + ' ' + '23:59';
            this.value = startDate + ' ~ ' + endDate;
            var chartId = $(this).attr('chart-id');
            var devGroup = $(this).attr('dev-group');

            var options = {
                startOfWeek: 'monday',
                separator: ' ~ ',
                maxDays: 2,
                minDays: 1,
                format: 'YYYY-MM-DD HH:mm',
                autoClose: true,
                time: {
                    enabled: true
                },
                singleDateMultipleTime: true
            }

            $(dpId).dateRangePicker(options);
            $(dpId).bind('datepicker-change', function (event, obj) {
                RefreshChart(chartId, devGroup);
            })
        });
        //click default tab
        $('.tab-controll .tab-link:first-child').trigger('click');
        //$('.device-type-group-controll .device-type-controll:first-child').trigger('click');

        //socket io
        var socket = io();
        var user = $('#user').val();

        //start real time
        async function StartRealTime() {
            var listDevices = [];
            await $('.gateway_sn').map(function (e) {
                var gateway_sn = this.value;
                listDevices.push(gateway_sn);
            })
            //console.log(listGateWay);
            if (listDevices) {
                socket.emit('start_real_time_device', { listDevices, user });
            }


        }
        StartRealTime();

        //on realtime value
        $('.device-item').map(function () {
            var deviceSn = $(this).attr('device-sn');
            socket.on(deviceSn, function (value) {
                // value = {serial: ..., value: {...}}
                var serial = value.serial;
                var data = value.data;
                var rssi = data.rssi;
                var battery = data.battery;
                var valueHtml = '';
                for (const [key, value] of Object.entries(data.val)) {
                    valueHtml += value + '</br>';
                }


                $(`#dev-${deviceSn}`).removeClass('status-1 status-2 status-0');
                $(`#dev-${deviceSn}`).addClass('status-1');

                $(`#dev-${deviceSn} .device-item-battery .value`).html(battery);
                $(`#dev-${deviceSn} .device-item-rssi .value`).html(rssi);
                $(`#dev-${deviceSn} .device-item-value .value`).html(rssi);
                //console.log(deviceSn, value)
            });
        })

        //check device disconnect
        socket.on('device_disconnect', function (data) {
            if (String(data).slice(0, 4) == 'BSGW') {
                $(`#gw-${data} .device-item`).removeClass('status-1 status-2 status-0');
                $(`#gw-${data} .device-item`).addClass('status-0');

                $(`#gw-${data} .device-item .device-item-battery .value`).html("N/a");
                $(`#gw-${data} .device-item .device-item-rssi .value`).html("N/a");
                $(`#gw-${data} .device-item .device-item-value .value`).html("N/a");
            } else {
                $(`#dev-${data}`).removeClass('status-1 status-2 status-0');
                $(`#dev-${data}`).addClass('status-0');

                $(`#dev-${data} .device-item-battery .value`).html("N/a");
                $(`#dev-${data} .device-item-rssi .value`).html("N/a");
                $(`#dev-${data} .device-item-value .value`).html("N/a");
            }
        })

        //update node status
        socket.on('node_status', function (data) {
            var serial = data.serial;
            var status = data.status;

            if (status == '0' || status == '2') {
                $(`#dev-${serial}`).removeClass('status-1 status-2 status-0');
                $(`#dev-${serial}`).addClass(`status-${status}`);

                $(`#dev-${serial} .device-item-battery .value`).html("N/a");
                $(`#dev-${serial} .device-item-rssi .value`).html("N/a");
                $(`#dev-${serial} .device-item-value .value`).html("N/a");
            }
        })

        //draw chart
        // prepare data draw chart
        async function PrepareChartData(serial, startDate, endDate) {
            var url = '/device/device-logs';
            var method = 'POST';
            var param = { serial: serial, startDate: startDate, endDate: endDate };
            var response = await CallApi(url, param, method).then(resData => {
                if (resData.status == 400) {
                    return '';
                }
                else {
                    // console.log(resData.deviceLogs)
                    var deviceLogs = resData.deviceLogs;
                    return deviceLogs;
                }
            });
            return response;
        }

        // event draw chart
        $(document).on('click', '.device-item', async function () {
            $('#mask').show();
            var serial = $(this).attr('device-sn');
            var devName = $(this).attr('dev-name');
            var gateway = $(this).attr('gateway');
            var devType = $(this).attr('dev-type');
            var chartId = `chart-${gateway}-${devType}`;
            var chart = Chart.getChart(chartId);
            var onChart = $(this).data('on-chart');
            var uomValue = $(`#uom-${gateway}-${devType}`).val();
            var uomText = $(`#uom-${gateway}-${devType} option:selected`).text();
            var typeName = $(this).attr('type-name');
            var color = Colors[$(this).attr('color-idx')];
            var dpValue = $(`#date-picker-${gateway}-${devType}`).val().split(' ~ ');
            var startDate = dpValue[0];
            var endDate = dpValue[1];
            var chartTitle = String(`${typeName} ( ${uomText} ) - Từ ${startDate} đến ${endDate}`).toUpperCase();

            if (onChart == 'true') {
                $(this).data('on-chart', 'false');
                $(this).removeClass('on-chart');

                var checkDeviceSelected = $(`#dev-type-${gateway}-${devType} .device-item`).hasClass('on-chart');
                if (!checkDeviceSelected) {
                    chart.destroy();
                    $(`#dev-type-${gateway}-${devType} .chart-title`).show();
                    ScrollToElement($(this).attr('id'));
                } else {
                    RemoveDataChart(chart, serial);
                    ScrollToElement(chartId);
                }
            } else {
                $(this).data('on-chart', 'true');
                $(this).addClass('on-chart');

                var chartData = await PrepareChartData(serial, startDate, endDate);
                var dataset = {
                    id: serial,
                    label: devName,
                    data: [],
                    backgroundColor: [
                        color
                    ],
                    borderColor: [
                        color
                    ],
                    borderWidth: 1
                };

                if (chartData) {
                    chartData.forEach((log) => {
                        var dbValue = [];
                        for (var key of Object.keys(log.device_value)) {
                            if (key == uomValue) {
                                dbValue = log.device_value[key].split('-')
                            }
                        }

                        var value = dbValue[0];
                        var uom = dbValue[1];
                        var data = { x: log.createdAt, y: value * 1 }
                        dataset.data.push(data);
                    });
                }
                if (!chart) {
                    $(`#dev-type-${gateway}-${devType} .chart-title`).hide();
                    RenderChart(chartId, dataset, chartTitle);
                } else {
                    chart.data.datasets.push(dataset);
                    chart.update();
                    ScrollToElement(chartId);
                }
            }
            $('#mask').hide();
        })

        //render chart
        function RenderChart(chartId, dataset, chartTitle) {
            var ctx = document.getElementById(chartId);
            if (ctx) {
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [dataset]
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    displayFormats: {
                                        quarter: 'dd/MM HH:mm'
                                    }
                                },
                                ticks: {
                                    color: "#fff"
                                },
                            },
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    color: "#fff"
                                },
                            }
                        },
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    color: '#fff'
                                }
                            },
                            title: {
                                display: true,
                                text: chartTitle,
                                color: '#fff',
                                font: { size: 15, weight: 'bold' }
                            }
                        },
                    }
                });
                ScrollToElement(chartId);
            }

        }

        //remove data in datasets
        function RemoveDataChart(chart, id) {
            chart.data.datasets = chart.data.datasets.filter(function (obj) {
                return (obj.id != id);
            });
            chart.update();
        }

        //event refresh chart
        $(document).on('change', '.list-uom', function () {
            var chartId = $(this).attr('chart-id');
            var devGroup = $(this).attr('dev-group');

            RefreshChart(chartId, devGroup);
        })

        //refresh chart
        async function RefreshChart(chartId, devGroup) {

            var serials = [];
            var chart = Chart.getChart(chartId);

            if (chart) {
                chart.data.datasets.forEach(function (data) {
                    var id = data.id;
                    serials.push(id);
                });
            } else {
                return;
            }
            $('#mask').show();

            var dpValue = $(`#${devGroup} .date-picker`).val().split(' ~ ');
            var startDate = dpValue[0];
            var endDate = dpValue[1];
            var uomValue = $(`#${devGroup} .list-uom`).val();
            var uomText = $(`#${devGroup} .list-uom option:selected`).text();
            var typeName = $(`#${devGroup}`).attr('group-label');
            var chartTitle = String(`${typeName} ( ${uomText} )  - Từ ${startDate} đến ${endDate}`).toUpperCase();
            var datasets = [];

            var deviceLogs = await PrepareChartData(serials, startDate, endDate);

            if (deviceLogs) {
                serials.forEach(function (serial) {
                    var colorIdx = $(`#dev-${serial}`).attr('color-idx');
                    var color = Colors[colorIdx];
                    var devName = $(`#dev-${serial}`).attr('dev-name');

                    var dataset = {
                        id: serial,
                        label: devName,
                        data: [],
                        backgroundColor: [
                            color
                        ],
                        borderColor: [
                            color
                        ],
                        borderWidth: 1
                    };
                    deviceLogs.forEach(function (log) {
                        if (log.device_serial == serial) {
                            var dbValue = [];
                            for (var key of Object.keys(log.device_value)) {
                                if (key == uomValue) {
                                    dbValue = log.device_value[key].split('-')
                                }
                            }

                            var value = dbValue[0];
                            var uom = dbValue[1];
                            var data = { x: log.createdAt, y: value * 1 }
                            dataset.data.push(data);
                        }
                    })

                    datasets.push(dataset);
                })

                chart.data.datasets = datasets;
                chart.options.plugins.title.text = chartTitle;
                chart.update();
                ScrollToElement(chartId);
            }
            //console.log(datasets);
            $('#mask').hide();
        }

        //Quick time controll
        $(document).on('click', '.quick-time-item', function () {
            var devGroup = $(this).parents('.device-group').attr('id');
            var chartId = $(`#${devGroup}`).attr('chart-id');
            var startTime = $(this).attr('start-time');
            var endTime = $(this).attr('end-time');
            var currentDate = $(`#${devGroup} .date-picker`).val().split(" ~ ");
            var startDate = currentDate[0].slice(0, 11) + startTime;
            var endDate = currentDate[1].slice(0, 11) + endTime;
            var newDate = startDate + ' ~ ' + endDate;

            $(`#${devGroup} .quick-time-item`).removeClass('high-light-box');
            $(this).addClass('high-light-box');

            $(`#${devGroup} .date-picker`).val(newDate);


            RefreshChart(chartId, devGroup);
        })
    })
</script>