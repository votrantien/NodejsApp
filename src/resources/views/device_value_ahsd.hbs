<style>
    .group-wrapper {
        margin-bottom: 15px;
    }

    .group-label {
        font-size: 2rem;
        color: #039666;
        margin-bottom: 15px;
    }

    .group-item {
        border-bottom: solid 1px #016343;
        border-left: solid 1px #016343;
        padding-bottom: 5px;
    }

    .tab-controll {
        border-bottom: solid 2px #016343;
    }

    .tab-link {
        font-size: 1.5rem;
        border-radius: 0;
        outline: none;
        border: none;
        padding: 15px;
        margin: 0;
        color: white;
        background-color: #016343;
        position: relative;
        margin: 0px 0px 5px;
    }

    .tab-active {
        background-color: #039666;
    }

    .tab-content {
        margin-top: 15px;
        padding: 15px;
    }

    .device-type-controll {
        position: relative;
        font-size: 1.5rem;
        border-radius: 0;
        outline: none;
        border: none;
        padding: 10px;
        margin: 5px;
        color: white;
        background-color: #016343;
    }

    .device-group {
        padding-top: 2px;
        margin: 5px;
        position: relative;
        border: solid 1px #016343;
        margin-top: 15px;
    }

    .device-group::before {
        content: attr(group-label)"\a";
        white-space: pre;
        background-color: #016343;
        padding: 5px;
    }

    .device-item {
        padding: 12px;
        width: 150px;
        max-width: 150px;
        font-size: 1.3rem;
        border-radius: 0;
        outline: none;
        border: none;
        margin: 10px;
        color: white;
        background-color: #016343;
        text-align: left;
        text-overflow: ellipsis;
        position: relative;
    }

    .device-item * {}

    .device-item .device-item-value {
        text-align: right;
        font-size: 2rem;
        font-weight: bold;
    }

    .collapse-open::after {
        position: absolute;
        content: '';
        width: 5px;
        height: 100%;
        left: 0;
        background-color: yellow;
        top: 0;
    }

    /* device status */
    .status-1::after {
        position: absolute;
        content: 'Online';
        color: #42ff42;
        top: 0;
        right: 0;
        padding: 1px 3px 1px;
        font-weight: bold;
        background-color: rgba(0, 0, 0, 0.7);
        font-size: 1.2rem;
    }

    .status-2::after {
        position: absolute;
        content: 'Sleep';
        color: #fbff04;
        top: 0;
        right: 0;
        padding: 1px 3px 1px;
        font-weight: bold;
        background-color: rgba(0, 0, 0, 0.7);
        font-size: 1.2rem;
    }

    .status-0::after {
        position: absolute;
        content: 'Offline';
        color: #ff0000;
        top: 0;
        right: 0;
        padding: 1px 3px 1px;
        font-weight: bold;
        background-color: rgba(0, 0, 0, 0.7);
        font-size: 1.2rem;
    }

    .uom-wrapper {
        padding: 8px;
    }

    .list-uom {
        background-color: black;
        border: none;
        min-width: 200px;
        font-weight: bold;
    }

    .chart-title {
        width: 100%;
        color: rgba(255, 255, 255, 0.7);
        text-align: center;
    }

    .chart-wrapper {
        position: relative;
    }

    .chart-canvas {
        max-height: 400px;
    }

    /* check device on chart */
    .on-chart::before {
        position: absolute;
        content: 'Biểu đồ';
        padding: 3px;
        font-size: 1rem;
        background-color: green;
        color: #fff;
        bottom: 0;
        right: 0;
    }

    .date-picker-div {
        margin: 10px;
    }

    .date-picker-div .date-picker {
        background: none;
        color: #fff;
        text-align: left;
        width: fit-content;
    }

    .date-picker-wrapper table {
        background-color: #016343;
    }

    .quick-time-wrapper {
        padding: 5px;
    }

    .quick-time-list {
        display: flex;
        list-style: none;
        padding: 0;
    }

    .quick-time-list .quick-time-item {
        padding: 5px 10px 5px;
        font-size: 1.3rem;
        font-weight: bold;
        margin-left: 5px;
        width: 50px;
        text-align: center;
        cursor: pointer;
        position: relative;
        background-color: #016343;
        color: #fff;
    }

    .quick-time-list .quick-time-label {
        padding: 5px 10px 5px;
        font-size: 1.3rem;
        font-weight: bold;
        margin-left: 5px;
        text-align: center;
        background-color: #016343;
        color: #fff;
    }

    .high-light-box::after {
        position: absolute;
        content: '';
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: solid 3px #1ee05a;
    }
</style>
<div id="page-wrapper">
    <input type="hidden" id="user" value="{{username}}">
    <div class="row">
        {{!-- group --}}
        {{#groups as |group|}}
        <div class="col-lg-12 group-wrapper">
            {{!-- group label --}}
            <div class="group-label">
                <i class="fas fa-leaf fa-lg"></i>
                <span class="group-name">{{this.group_name}}</span>
            </div>
            {{!-- group item --}}
            <div class="group-item" id="g-{{group._id}}">

                {{!-- tab gateway controll --}}
                <div class="tab-controll">
                    {{#each ../devices as |device|}}
                    {{#if_ device.group._id '==' group._id}}
                    <button class="tab-link status-{{device.status}}"
                        onclick="openGroupContent('dev-{{device.sn_number}}',this,'g-{{group._id}}')"
                        id="tab-{{device.sn_number}}">
                        {{device.device_name}}</button>
                    {{/if_}}
                    {{/each}}
                </div>
                {{!-- tab content gateway --}}
                {{#each ../devices as |device|}}
                {{#if_ device.group._id '==' group._id}}
                <input type="hidden" class="device_sn" value="{{device.sn_number}}">
                <div class="row tab-content" id="dev-{{device.sn_number}}" style="display: none;">
                    {{!-- device item --}}
                    <div class="date-picker-div">
                        <label for="#date-picker-{{device.sn_number}}">
                            Thời gian
                        </label>
                        <input type="button" class="date-picker" id="date-picker-{{device.sn_number}}"
                            chart-id="chart-{{device.sn_number}}">
                    </div>
                    {{!-- device controll --}}
                    <div>
                        {{#each device.device_type.uom_values as |value_type|}}
                        <button class="device-item" style="background-color: #016343;"
                            id="val-{{device.sn_number}}-{{@key}}" device-sn="{{device.sn_number}}"
                            color-idx="{{@index}}" key-value="{{@key}}" value-name="{{value_type.name}}"
                            uom="{{value_type.uom}}" on-chart="false">
                            <p class="device-item-dynamic-value">
                                <span>{{value_type.name}}</span>
                                <br>
                                <span class="device-item-value">
                                    <i class="fas fa-bullseye icon"></i>
                                    <i class="value" style="width: 50px;">N/a</i>
                                </span>
                                <i class="uom">{{value_type.uom}}</i>
                            </p>
                        </button>
                        {{/each}}
                    </div>
                    {{!-- chart area --}}
                    <div class="chart-area">
                        <input type="hidden" id="uom-key-{{device.sn_number}}">
                        <div class="quick-time-wrapper col-lg-6">
                            <ul class="quick-time-list">
                                <li class="quick-time-label">Mốc thời gian</li>
                                <li class="quick-time-item" start-time="00:00" end-time="03:00">3h</li>
                                <li class="quick-time-item" start-time="03:00" end-time="09:00">6h</li>
                                <li class="quick-time-item" start-time="06:00" end-time="12:00">9h</li>
                                <li class="quick-time-item" start-time="09:00" end-time="23:59">12h</li>
                                <li class="quick-time-item" start-time="00:00" end-time="23:59">24h</li>
                            </ul>
                        </div>
                        <div class="col-lg-12 chart-wrapper">
                            <h3 class="chart-title">Chưa có dữ liệu</h3>
                            <canvas id="chart-{{device.sn_number}}" width="100%" class="chart-canvas"></canvas>
                        </div>
                    </div>
                </div>
                {{!-- device item --}}
                {{/if_}}
                {{/each}}
            </div>
            {{!-- tab content gateway --}}
        </div>
        {{/groups}}
        {{!-- end group --}}
    </div>
    <!-- /.row -->
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="/js/chart.min.js"></script>
<script src="/js/chartjs-adapter-date-fns.bundle.min.js"></script>
<script src="/js/jquery.daterangepicker.js"></script>
<script>
    //tab controll
    function openGroupContent(idgateWay, element, idGroup) {
        $(`#${idGroup} .tab-content`).hide();
        $(`#${idGroup} .tab-link`).removeClass('tab-active');
        $(element).toggleClass('tab-active');
        $(`#${idgateWay}`).show();
    }

    $(document).ready(function () {
        //datepicker 
        $('.date-picker').each(function () {
            var dpId = '#' + $(this).attr('id');
            var today = new Date()
            var startDate = String(today.getFullYear()).padStart(2, '0') + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + String(today.getDate()).padStart(2, '0') + ' ' + '00:00';
            var endDate = String(today.getFullYear()).padStart(2, '0') + '-' + String(today.getMonth() + 1).padStart(2, '0') + '-' + String(today.getDate()).padStart(2, '0') + ' ' + '23:59';
            this.value = startDate + ' ~ ' + endDate;
            var chartId = $(this).attr('chart-id');
            var devGroup = $(this).parents('.tab-content').attr('id');

            var options = {
                startOfWeek: 'monday',
                separator: ' ~ ',
                maxDays: 2,
                minDays: 1,
                format: 'YYYY-MM-DD HH:mm',
                autoClose: true,
                time: {
                    enabled: true
                },
                singleDateMultipleTime: true
            }

            $(dpId).dateRangePicker(options);
            $(dpId).bind('datepicker-change', function (event, obj) {
                RefreshChart(chartId, devGroup);
            })
        });
        //click default tab
        $('.tab-controll .tab-link:first-child').trigger('click');
        //$('.device-type-group-controll .device-type-controll:first-child').trigger('click');

        //socket io
        var socket = io();
        var user = $('#user').val();
        var listDevices = [];
        $('.device_sn').map(function (e) {
            var device_sn = this.value;
            listDevices.push(device_sn);
        })
        //start real time
        function StartRealTime() {
            //console.log(listGateWay);
            if (listDevices) {
                socket.emit('start_real_time_device', { listDevices, user });
            }


        }
        StartRealTime();

        //Device connected
        socket.on('device_connect', function (data) {
            if (listDevices.indexOf(data) != -1) {
                $(`#tab-${data}`).removeClass('status-1 status-2 status-0');
                $(`#tab-${data}`).addClass('status-1');
                socket.emit('start_real_time_device', { listDevices, user });
            }
        })

        //on realtime value
        $('.device_sn').map(function () {
            var deviceSn = $(this).val();
            socket.on(deviceSn, function (value) {
                // value = {serial: ..., value: {...}}
                // console.log(value);
                var serial = value.serial;
                var data = value.data;
                for (const [key, value] of Object.entries(data.val)) {
                    var idxValue = key;
                    var idValueType = 'val-' + deviceSn + '-' + idxValue;
                    $(`#${idValueType} .device-item-value .value`).html(value);
                }
                //console.log(deviceSn, value)
            });
        })

        //check device disconnect
        socket.on('device_disconnect', function (data) {
            if (String(data).slice(0, 4) == 'AHSD') {
                $(`#tab-${data}`).removeClass('status-1 status-2 status-0');
                $(`#tab-${data}`).addClass('status-0');

                $(`#dev-${data} .device-item .device-item-value .value`).html("N/a");
            }
        })


        //draw chart
        // prepare data draw chart
        async function PrepareChartData(serial, startDate, endDate) {
            var url = '/device/device-logs';
            var method = 'POST';
            var param = { serial: serial, startDate: startDate, endDate: endDate };
            var response = await CallApi(url, param, method).then(resData => {
                if (resData.status == 400) {
                    return '';
                }
                else {
                    // console.log(resData.deviceLogs)
                    var deviceLogs = resData.deviceLogs;
                    return deviceLogs;
                }
            });
            return response;
        }

        // event draw chart
        $(document).on('click', '.device-item', async function () {
            $('#mask').show();
            var serial = $(this).attr('device-sn');
            var valueName = $(this).attr('value-name');
            var keyValue = $(this).attr('key-value');
            var chartId = `chart-${serial}`;
            var chart = Chart.getChart(chartId);
            var uomValue = $(this).attr('uom');
            var color = Colors[$(this).attr('color-idx')];
            var dpValue = $(`#date-picker-${serial}`).val().split(' ~ ');
            var startDate = dpValue[0];
            var endDate = dpValue[1];
            var chartTitle = String(`${valueName} ( ${uomValue} ) - Từ ${startDate} đến ${endDate}`).toUpperCase();

            var onChart = $(this).attr('on-chart');

            if (onChart == 'true') {
                $(this).attr('on-chart', 'false');
                $(this).removeClass('on-chart');
                chart.destroy();
                $(`#dev-${serial} .chart-title`).show();
            } else {
                $(`#uom-key-${serial}`).val(keyValue);
                var chartData = await PrepareChartData(serial, startDate, endDate);
                console.log(chartData);
                var dataset = {
                    id: serial,
                    label: valueName,
                    data: [],
                    backgroundColor: [
                        color
                    ],
                    borderColor: [
                        color
                    ],
                    borderWidth: 1
                };

                if (chartData) {
                    chartData.forEach((log) => {
                        console.log(keyValue)
                        var value = log.device_value[keyValue];
                        var data = { x: log.createdAt, y: value * 1 }
                        dataset.data.push(data);
                    });
                }
                if (!chart) {
                    $(`#dev-${serial} .chart-title`).hide();
                    RenderChart(chartId, dataset, chartTitle);
                } else {
                    chart.data.datasets = [dataset];
                    chart.options.plugins.title.text = chartTitle;
                    chart.update();
                    ScrollToElement(chartId);
                }
                $(`#dev-${serial} .device-item`).removeClass('on-chart');
                $(this).addClass('on-chart');
                $(this).attr('on-chart', 'true');
            }
            $('#mask').hide();
        })

        //render chart
        function RenderChart(chartId, dataset, chartTitle) {
            var ctx = document.getElementById(chartId);
            if (ctx) {
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        datasets: [dataset]
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    displayFormats: {
                                        quarter: 'dd/MM HH:mm'
                                    }
                                },
                                ticks: {
                                    color: "#fff"
                                },
                            },
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    color: "#fff"
                                },
                            }
                        },
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    color: '#fff'
                                }
                            },
                            title: {
                                display: true,
                                text: chartTitle,
                                color: '#fff',
                                font: { size: 15, weight: 'bold' }
                            }
                        },
                    }
                });
                ScrollToElement(chartId);
            }

        }

        //remove data in datasets
        function RemoveDataChart(chart, id) {
            chart.data.datasets = chart.data.datasets.filter(function (obj) {
                return (obj.id != id);
            });
            chart.update();
        }

        //refresh chart
        async function RefreshChart(chartId, devGroup) {
            var chart = Chart.getChart(chartId);
            if (!chart) {
                return;
            }
            $('#mask').show();

            var onChartItem = $(`#${devGroup} .device-item[on-chart*="true"]`);
            var serial = $(onChartItem).attr('device-sn');
            var valueName = $(onChartItem).attr('value-name');
            var keyValue = $(onChartItem).attr('key-value');
            var uomValue = $(onChartItem).attr('uom');
            var color = Colors[$(onChartItem).attr('color-idx')];
            var dpValue = $(`#date-picker-${serial}`).val().split(' ~ ');
            var startDate = dpValue[0];
            var endDate = dpValue[1];
            var chartTitle = String(`${valueName} ( ${uomValue} ) - Từ ${startDate} đến ${endDate}`).toUpperCase();

            var onChart = $(this).data('on-chart');


            $(`#uom-key-${serial}`).val(keyValue);
            var chartData = await PrepareChartData(serial, startDate, endDate);

            var dataset = {
                id: serial,
                label: valueName,
                data: [],
                backgroundColor: [
                    color
                ],
                borderColor: [
                    color
                ],
                borderWidth: 1
            };

            if (chartData) {
                chartData.forEach((log) => {
                    var value = log.device_value[keyValue];
                    var data = { x: log.createdAt, y: value * 1 }
                    dataset.data.push(data);
                });
            }
            if (!chart) {
                $(`#dev-${serial} .chart-title`).hide();
                RenderChart(chartId, dataset, chartTitle);
            } else {
                chart.data.datasets = [dataset];
                chart.options.plugins.title.text = chartTitle;
                chart.update();
                ScrollToElement(chartId);
            }
            //console.log(datasets);
            $('#mask').hide();
        }

        //Quick time controll
        $(document).on('click', '.quick-time-item', function () {
            var devGroup = $(this).parents('.tab-content').attr('id');
            var chartId = $(`#${devGroup} .chart-canvas`).attr('id');
            var startTime = $(this).attr('start-time');
            var endTime = $(this).attr('end-time');
            var currentDate = $(`#${devGroup} .date-picker`).val().split(" ~ ");
            var startDate = currentDate[0].slice(0, 11) + startTime;
            var endDate = currentDate[1].slice(0, 11) + endTime;
            var newDate = startDate + ' ~ ' + endDate;

            $(`#${devGroup} .quick-time-item`).removeClass('high-light-box');
            $(this).addClass('high-light-box');

            $(`#${devGroup} .date-picker`).val(newDate);


            RefreshChart(chartId, devGroup);
        })
    })
</script>